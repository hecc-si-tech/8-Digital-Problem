#include <iostream>
#include <vector>
using namespace std;

//定义一个结构体，存储八数码的值，以及搜索深度等等
struct Matrixx
{
	int arr[4][4]; // 存储八数码
	int par; 
	int cur; 
	int depth;
};
//所有函数的函数声明
int checkZeroXY(int arr[4][4]);
bool up(int arr[4][4]);
bool down(int arr[4][4]);
bool left(int arr[4][4]);
bool right(int arr[4][4]);


//确定0的位置
int checkZeroXY(int arr[4][4])
{
	int index = 100000000;
	long long result = 0;
	for (int i = 1; i <= 3; i++)
	{
		for (int j = 1; j <= 3; j++)
		{
			result += arr[i][j] * index;
			index /= 10;
		}
	}
	return result;
}
//将矩阵中的0向上移动
bool up(int arr[4][4])
{
	int i, j; 
	bool flag = false;
	for (i = 1; i <= 3; i++)
	{
		for (j = 1; j <= 3; j++)
			if (arr[i][j] == 0)
			{
				flag = true;
				break;
			}
		if (flag)
			break;
	}
	if (i == 1)
		return false;
	else
	{
		arr[i][j] = arr[i - 1][j];
		arr[i - 1][j] = 0;
	}
	return true;
}
//将矩阵中的0向下移动
bool down(int arr[4][4])
{
	int i, j; 
	bool flag = false;
	for (i = 1; i <= 3; i++)
	{
		for (j = 1; j <= 3; j++)
			if (arr[i][j] == 0)
			{
				flag = true;
				break;
			}
		if (flag)
			break;
	}
	if (i == 3)
		return false;
	else
	{
		arr[i][j] = arr[i + 1][j];
		arr[i + 1][j] = 0;
	}
	return true;
}
//将矩阵中的0向左移动
bool left(int arr[4][4])
{
	int i, j; 
	bool flag = false;
	for (i = 1; i <= 3; i++)
	{
		for (j = 1; j <= 3; j++)
			if (arr[i][j] == 0)
			{
				flag = true;
				break;
			}
		if (flag)
			break;
	}
	if (j == 1)
		return false; 
	else
	{
		arr[i][j] = arr[i][j - 1];
		arr[i][j - 1] = 0;
	}
	return true;
}
//将矩阵中的0向右移动
bool right(int arr[4][4])
{
	int i, j;
	bool flag = false;
	for (i = 1; i <= 3; i++)
	{
		for (j = 1; j <= 3; j++)
			if (arr[i][j] == 0)
			{
				flag = true;
				break;
			}
		if (flag)
			break;
	}
	if (j == 3)
		return false; 
	else
	{
		arr[i][j] = arr[i][j + 1];
		arr[i][j + 1] = 0;
	}
	return true;
}
int main()
{
	int arr[4][4] = { 0 }; // 存储当前八数码
	vector<Matrixx> open; 
	vector<Matrixx> closed; 
	int depth; 
	Matrixx octal;

	cout << "请输入起始矩阵的值：" << endl;
	for (int i = 1; i <= 3; i++)
	{
		for (int j = 1; j <= 3; j++)
		{
			cin >> arr[i][j];
			octal.arr[i][j] = arr[i][j];
		}
	}

	cout << "请输入深度：" << endl;
	cin >> depth;

	cout << "深度优先搜索矩阵的运算过程:" << endl;
	//定义相关数据的初值
	octal.par = 0;
	octal.cur = checkZeroXY(arr);
	octal.depth = 0;
	open.push_back(octal);

	int goal = 123456780; // 最终的八数码值
	bool flag = false; // 成功flag的值为true，否则为false
	Matrixx temp;
	int count = 1;

	while (!open.empty())
	{
		temp.cur = open[open.size() - 1].cur;
		temp.par = open[open.size() - 1].par;
		temp.depth = open[open.size() - 1].depth;
		for (int i = 1; i <= 3; i++)
			for (int j = 1; j <= 3; j++)
				temp.arr[i][j] = open[open.size() - 1].arr[i][j];

		open.pop_back();
		closed.push_back(temp);
		if (temp.cur == goal)
		{
			flag = true;
			break;
		}
		if (temp.depth >= depth)
		{
			continue;
		}

		Matrixx nextFour[4]; 
		for (int i = 0; i < 4; i++)
		{
			nextFour[i].par = temp.cur;
			for (int j = 1; j <= 3; j++)
				for (int k = 1; k <= 3; k++)
					nextFour[i].arr[j][k] = temp.arr[j][k];
			nextFour[i].depth = temp.depth + 1;
		}

		bool flagMatrix[4][2]; // 四个八数码对应的标志，0为open中是否含有，1位closed中是否含有
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 2; j++)
				flagMatrix[i][j] = true;

		if (up(nextFour[0].arr))
		{
			nextFour[0].cur = checkZeroXY(nextFour[0].arr);
			for (int i = 0; i < open.size(); i++)
				if (open[i].cur == nextFour[0].cur)
				{
					flagMatrix[0][0] = false;
					break;
				}

			if (flagMatrix[0][0])
			{
				for (int i = 0; i < closed.size(); i++)
					if (closed[i].cur == nextFour[0].cur)
					{
						flagMatrix[0][1] = false;
						break;
					}
				if (flagMatrix[0][1])
					open.push_back(nextFour[0]);
			}
		}

		if (down(nextFour[1].arr))
		{
			nextFour[1].cur = checkZeroXY(nextFour[1].arr);
			for (int i = 0; i < open.size(); i++)
				if (open[i].cur == nextFour[1].cur)
				{
					flagMatrix[1][0] = false;
					break;
				}

			if (flagMatrix[1][0])
			{
				for (int i = 0; i < closed.size(); i++)
					if (closed[i].cur == nextFour[1].cur)
					{
						flagMatrix[1][1] = false;
						break;
					}
				if (flagMatrix[1][1])
					open.push_back(nextFour[1]);
			}
		}

		if (left(nextFour[2].arr))
		{
			nextFour[2].cur = checkZeroXY(nextFour[2].arr);
			for (int i = 0; i < open.size(); i++)
				if (open[i].cur == nextFour[2].cur)
				{
					flagMatrix[2][0] = false;
					break;
				}

			if (flagMatrix[2][0])
			{
				for (int i = 0; i < closed.size(); i++)
					if (closed[i].cur == nextFour[2].cur)
					{
						flagMatrix[2][1] = false;
						break;
					}
				if (flagMatrix[2][1])
					open.push_back(nextFour[2]);
			}
		}

		if (right(nextFour[3].arr))
		{
			nextFour[3].cur = checkZeroXY(nextFour[3].arr);
			for (int i = 0; i < open.size(); i++)
				if (open[i].cur == nextFour[3].cur)
				{
					flagMatrix[3][0] = false;
					break;
				}

			if (flagMatrix[3][0])
			{
				for (int i = 0; i < closed.size(); i++)
					if (closed[i].cur == nextFour[3].cur)
					{
						flagMatrix[3][1] = false;
						break;
					}
				if (flagMatrix[3][1])
					open.push_back(nextFour[3]);
			}
		}
	}

	if (flag)
	{
		vector<Matrixx> answer;
		cout << "该矩阵可以移动到目标矩阵" << endl;
		answer.push_back(temp);
		int parent = temp.par;

		while (parent != 0)
		{
			for (int j = 0; j < closed.size(); j++)
			{
				if (closed[j].cur == parent)
				{
					temp.cur = closed[j].cur;
					temp.depth = closed[j].depth;
					temp.par = closed[j].par;
					for (int k = 1; k <= 3; k++)
					{
						for (int m = 1; m <= 3; m++)
						{
							temp.arr[k][m] = closed[j].arr[k][m];
						}
					}
					answer.push_back(temp);
					parent = closed[j].par;
					break;
				}
			}
		}

		for (int i = answer.size() - 1; i >= 0; i--)
		{
			cout << "第" << answer.size() - i << "次：" << endl;
			for (int j = 1; j <= 3; j++)
			{
				for (int k = 1; k <= 3; k++)
				{
					cout << answer[i].arr[j][k] << " ";
				}
				cout << endl;
			}
		}
	}
	else
	{
		cout << "在深度为" << depth << "的情况下，该矩阵可能无解" << endl;
	}
	getchar();
	getchar();
	return 0;
}
